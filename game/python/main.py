from asyncio import sleep
from collections import deque
import os
import socket
import struct
import threading
import time
from dqn_module import DQN, select_action, train_step
import torch.optim as optim
import numpy as np
import torch
MODEL_PATH = "dqn_model.pth"
TARGET_UPDATE_FREQUENCY = 10 # V√≠ d·ª•: c·∫≠p nh·∫≠t sau m·ªói 10 v√°n game
SERVER_HOST = '127.0.0.1'
SERVER_PORT = 8080
BUFFER_SIZE = 8
WIDTH, HEIGHT = 200.0, 200.0  # D√πng ƒë·ªÉ chu·∫©n h√≥a t·ªça ƒë·ªô

device = torch.device("cuda" if torch.cuda.is_available() else "cpu")
print("üî• Using device:", device)

print("CUDA available:", torch.cuda.is_available())
# print("Current device:", torch.cuda.current_device())
# print("Device name:", torch.cuda.get_device_name(torch.cuda.current_device()))

def recv_all(sock, length):
    """Nh·∫≠n ch√≠nh x√°c `length` byte t·ª´ socket."""
    data = b''
    while len(data) < length:
        more = sock.recv(length - len(data))
        if not more:
            raise ConnectionError("K·∫øt n·ªëi b·ªã ƒë√≥ng tr∆∞·ªõc khi nh·∫≠n ƒë·ªß d·ªØ li·ªáu.")
        data += more
    return data
def recvValue(client_socket):
    sizeData = recv_all(client_socket, BUFFER_SIZE) #nh·∫≠n size
    sizeData = struct.unpack('!Q', sizeData)[0]
    return sizeData
def sendValue(client_socket, sizeData):
    data = struct.pack("!Q", sizeData)
    client_socket.sendall(data)
def main():
    xHeadSnack = 0
    yHeadSnack = 0
    xFood = 0
    yFood = 0
    done = 0
    lastAction = 3;
    learningrate = 0.0001
    gamma = 0.9
    epsilon = 1.0
    epsilon_decay = 1.0 - (1.0/50000)
    min_epsilon = 0.01
    memory = deque(maxlen=100000)

    model = DQN(6, 128, 4).to(device)
    target_model = DQN(6, 128, 4).to(device)

    if os.path.exists(MODEL_PATH):
        checkpoint = torch.load(MODEL_PATH, weights_only=False, map_location=device)
        model.load_state_dict(checkpoint['model'])
        epsilon = checkpoint.get('epsilon', 1.0)
        memory = checkpoint.get('memory', [])
        print("‚úÖ ƒê√£ load model t·ª´ file.")
    else:
        print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file model, kh·ªüi t·∫°o model m·ªõi.")

    target_model.load_state_dict(model.state_dict())
    optimizer = optim.Adam(model.parameters(), learningrate)

    print(epsilon)
    # T·∫°o socket TCP
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((SERVER_HOST, SERVER_PORT))
    server_socket.listen(5)

    print(f"Server ƒëang ch·∫°y t·∫°i {SERVER_HOST}:{SERVER_PORT}, ƒë·ª£i k·∫øt n·ªëi t·ª´ client...")

    try:
        while True:
            client_socket, client_address = server_socket.accept()

            print(f"ƒê√£ k·∫øt n·ªëi v·ªõi client: {client_address}")
            last_state = None
            last_action = None
            games_played = 0
            while True:
                # torch.save({
                #     'model': model.state_dict(),
                #     'epsilon': epsilon,
                #     'memory': memory
                # }, MODEL_PATH)
                            
                sizeData = recvValue(client_socket) #nh·∫≠n size  
                data = client_socket.recv(sizeData).decode().strip()
                if not data:
                    break
                parts = data.split(',')
                xHeadSnack = float(parts[0])
                yHeadSnack = float(parts[1])
                xFood = float(parts[2])
                yFood = float(parts[3])
                done = parts[4] == '1' # l√† c·ªù ƒÉn m·ªìi
                lastAction = int(parts[5]) #l√† h∆∞·ªõng ƒëi
                checkDead = parts[6] == '1' # l√† c·ªù b√°o thua
                # print(f"[Client] g·ª≠i: {xHeadSnack, yHeadSnack, xFood, yFood, done, lastAction}")
                dir_x, dir_y = 0,0;

                # chuy·ªÉn th√†nh vector h∆∞·ªõng:
                if lastAction == 0:
                    dir_x, dir_y = 0, -1  # up
                elif lastAction == 1:
                    dir_x, dir_y = 0, 1   # down
                elif lastAction == 2:
                    dir_x, dir_y = 1, 0  # right
                elif lastAction == 3:
                    dir_x, dir_y = -1, 0   # left

                current_state = np.array([
                    xHeadSnack / WIDTH,
                    yHeadSnack / HEIGHT,
                    xFood / WIDTH,
                    yFood / HEIGHT,
                    dir_x,
                    dir_y
                ])

                if last_state is not None:
                    if(checkDead): 
                        reward = -100.0;
                    elif done:
                        reward = 50.0
                    else: 
                        reward = -0.1
                    
                    #+ 2. L∆∞u kinh nghi·ªám ho√†n ch·ªânh v√†o b·ªô nh·ªõ
                    #+    (state_c≈©, action_c≈©, reward_m·ªõi, state_m·ªõi, c·ªù_done_m·ªõi)
                    memory.append((last_state, last_action, reward, current_state, float(checkDead)))

                    #+ 3. Hu·∫•n luy·ªán model
                    train_step(model, target_model, memory, optimizer, gamma)

                action = select_action(current_state, epsilon, model)
                directions = ['u', 'd', 'r', 'l']
                action_str = directions[action]
                # print(f"ü§ñ AI ch·ªçn: {action_str}")
                try:
                    sendValue(client_socket, len(action_str))
                    dataSend = action_str.encode('utf-8')
                    client_socket.sendall(dataSend)
                except Exception as e:
                    client_socket.close()
                    break




                #+ L∆∞u l·∫°i tr·∫°ng th√°i v√† h√†nh ƒë·ªông hi·ªán t·∫°i ƒë·ªÉ d√πng cho v√≤ng l·∫∑p ti·∫øp theo
                last_state = current_state
                last_action = action

                # #+ X·ª≠ l√Ω khi game k·∫øt th√∫c
                # if done:
                #     print("Game Over. Chu·∫©n b·ªã v√°n m·ªõi.")

                if checkDead: # Ch·ªâ x·ª≠ l√Ω khi th·ª±c s·ª± thua
                    games_played += 1
                    # print(f"Game Over. V√°n th·ª© {games_played} ƒë√£ k·∫øt th√∫c. Chu·∫©n b·ªã v√°n m·ªõi.")

                    # C·∫≠p nh·∫≠t target network sau m·ªói TARGET_UPDATE_FREQUENCY v√°n
                    if games_played % TARGET_UPDATE_FREQUENCY == 0:
                        print(f"üîÑ C·∫≠p nh·∫≠t Target Network sau {games_played} v√°n.")
                        target_model.load_state_dict(model.state_dict())

                    # Reset l·∫°i ƒë·ªÉ kh√¥ng h·ªçc t·ª´ kinh nghi·ªám "v∆∞·ª£t game"
                    last_state = None
                    last_action = None
                    # epsilon += (1.0/50000)
                #+ Gi·∫£m epsilon sau m·ªói b∆∞·ªõc ƒëi
                epsilon = max(min_epsilon, epsilon * epsilon_decay)

    except KeyboardInterrupt:
        print("\nServer ƒë√£ d·ª´ng.")
    finally:
        try:
            torch.save({
                'model': model.state_dict(),
                'epsilon': epsilon,
                'memory': memory
            }, MODEL_PATH)
            print("üíæ ƒê√£ l∆∞u model v√†o file.")
        except Exception as e:
            print(f"‚ùå L·ªói khi l∆∞u model: {e}")
        finally:
            server_socket.close()
            print("üîå Server ƒë√£ ƒë√≥ng k·∫øt n·ªëi.")


if __name__ == "__main__":
    main()
